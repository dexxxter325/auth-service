name: CI #имя на гитхабе

on:  #условия для выполнения данного файла.
  push: #Он будет запускаться при пуше(отправка изменений из локальной ветки) в ветку main
    branches:
      - main
  pull_request: #он будет запускаться при pull запросе - запрос на внесение изменений из одной ветки в другую
    branches:
      - main

env:
  REGISTRY: "docker.io/flaw1ess"
  IMAGE_NAME: "crud_api" #имя docker-образа
  CONTAINER_NAME: "crud_api"
  TAG_NAME: "latest"

jobs:


  #нам нужно облако развертывания приложения ,тк оно нам создаet эндпоинт для нашего приложения, который будет доступен в интернете.После развертывания ,я получаю URL-адресс приложения
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      #- name: Build container image #создаем наш докер образ на удал.машине
       # run: docker build -t $REGISTRY/$IMAGE_NAME:$TAG_NAME .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/crud_api:latest

      #- name: Push image to Docker Hub Container Registry #пушим(отправляем) новую версию изобр. в DockerHub
       # run: docker push $REGISTRY/$IMAGE_NAME:$TAG_NAME

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Stop and remove the existing container (if exists)
        run: docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true

      - name: Run a new container from the pulled image #запускаем новый контейнер,основываясь на запушенном в DockerHub образе
        run: |
          docker run -d \
            --name $CONTAINER_NAME \
            -p 81:81 \
            $REGISTRY/$IMAGE_NAME:$TAG_NAME 
        



